{
  "information": {
    "description": [
      {
        "id": "CVE-2017-5638",
        "parameters": {
          "published": "2017-03-11T02:59Z",
          "modified": "2018-03-04T02:29Z",
          "summary": "The Jakarta Multipart parser in Apache Struts 2 2.3.x before 2.3.32 and 2.5.x before 2.5.10.1 has incorrect exception handling and error-message generation during file-upload attempts, which allows remote attackers to execute arbitrary commands via a crafted Content-Type, Content-Disposition, or Content-Length HTTP header, as exploited in the wild in March 2017 with a Content-Type header containing a #cmd= string."
        }
      }
    ],
    "references": [
      {
        "vendor": "MISC",
        "url": "http://blog.talosintelligence.com/2017/03/apache-0-day-exploited.html"
      },
      {
        "vendor": "MISC",
        "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/cve-2017-5638-apache-struts-vulnerability-remote-code-execution/"
      },
      {
        "vendor": "MISC",
        "url": "http://www.arubanetworks.com/assets/alert/ARUBA-PSA-2017-002.txt"
      },
      {
        "vendor": "MISC",
        "url": "http://www.eweek.com/security/apache-struts-vulnerability-under-attack.html"
      },
      {
        "vendor": "MISC",
        "url": "http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html"
      },
      {
        "vendor": "MISC",
        "url": "http://www.securityfocus.com/bid/96729"
      },
      {
        "vendor": "MISC",
        "url": "http://www.securitytracker.com/id/1037973"
      },
      {
        "vendor": "MISC",
        "url": "https://arstechnica.com/security/2017/03/critical-vulnerability-under-massive-attack-imperils-high-impact-sites/"
      },
      {
        "vendor": "MISC",
        "url": "https://cwiki.apache.org/confluence/display/WW/S2-045"
      },
      {
        "vendor": "MISC",
        "url": "https://cwiki.apache.org/confluence/display/WW/S2-046"
      },
      {
        "vendor": "MISC",
        "url": "https://exploit-db.com/exploits/41570"
      },
      {
        "vendor": "MISC",
        "url": "https://git1-us-west.apache.org/repos/asf?p=struts.git;a=commit;h=352306493971e7d5a756d61780d57a76eb1f519a"
      },
      {
        "vendor": "MISC",
        "url": "https://git1-us-west.apache.org/repos/asf?p=struts.git;a=commit;h=6b8272ce47160036ed120a48345d9aa884477228"
      },
      {
        "vendor": "MISC",
        "url": "https://github.com/mazen160/struts-pwn"
      },
      {
        "vendor": "MISC",
        "url": "https://github.com/rapid7/metasploit-framework/issues/8064"
      },
      {
        "vendor": "MISC",
        "url": "https://h20566.www2.hpe.com/hpsc/doc/public/display?docLocale=en_US&docId=emr_na-hpesbgn03733en_us"
      },
      {
        "vendor": "MISC",
        "url": "https://h20566.www2.hpe.com/hpsc/doc/public/display?docLocale=en_US&docId=emr_na-hpesbgn03749en_us"
      },
      {
        "vendor": "MISC",
        "url": "https://h20566.www2.hpe.com/hpsc/doc/public/display?docLocale=en_US&docId=emr_na-hpesbhf03723en_us"
      },
      {
        "vendor": "MISC",
        "url": "https://isc.sans.edu/diary/22169"
      },
      {
        "vendor": "MISC",
        "url": "https://nmap.org/nsedoc/scripts/http-vuln-cve2017-5638.html"
      },
      {
        "vendor": "MISC",
        "url": "https://packetstormsecurity.com/files/141494/S2-45-poc.py.txt"
      },
      {
        "vendor": "MISC",
        "url": "https://security.netapp.com/advisory/ntap-20170310-0001/"
      },
      {
        "vendor": "MISC",
        "url": "https://struts.apache.org/docs/s2-045.html"
      },
      {
        "vendor": "MISC",
        "url": "https://struts.apache.org/docs/s2-046.html"
      },
      {
        "vendor": "MISC",
        "url": "https://support.lenovo.com/us/en/product_security/len-14200"
      },
      {
        "vendor": "MISC",
        "url": "https://twitter.com/theog150/status/841146956135124993"
      },
      {
        "vendor": "MISC",
        "url": "https://www.exploit-db.com/exploits/41614/"
      },
      {
        "vendor": "MISC",
        "url": "https://www.imperva.com/blog/2017/03/cve-2017-5638-new-remote-code-execution-rce-vulnerability-in-apache-struts-2/"
      },
      {
        "vendor": "MISC",
        "url": "https://www.kb.cert.org/vuls/id/834067"
      },
      {
        "vendor": "MISC",
        "url": "https://www.symantec.com/security-center/network-protection-security-advisories/SA145"
      }
    ]
  },
  "classification": {
    "targets": [
      {
        "title": "Apache Software Foundation Struts 2.3.5",
        "cpe2.2": "cpe:/a:apache:struts:2.3.5",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.5:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.6",
        "cpe2.2": "cpe:/a:apache:struts:2.3.6",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.6:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.7",
        "cpe2.2": "cpe:/a:apache:struts:2.3.7",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.7:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.8",
        "cpe2.2": "cpe:/a:apache:struts:2.3.8",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.8:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.9",
        "cpe2.2": "cpe:/a:apache:struts:2.3.9",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.9:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.10",
        "cpe2.2": "cpe:/a:apache:struts:2.3.10",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.10:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.11",
        "cpe2.2": "cpe:/a:apache:struts:2.3.11",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.11:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.12",
        "cpe2.2": "cpe:/a:apache:struts:2.3.12",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.12:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.13",
        "cpe2.2": "cpe:/a:apache:struts:2.3.13",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.13:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.14",
        "cpe2.2": "cpe:/a:apache:struts:2.3.14",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.14:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.14.1",
        "cpe2.2": "cpe:/a:apache:struts:2.3.14.1",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.14.1:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.14.2",
        "cpe2.2": "cpe:/a:apache:struts:2.3.14.2",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.14.2:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.14.3",
        "cpe2.2": "cpe:/a:apache:struts:2.3.14.3",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.14.3:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.15",
        "cpe2.2": "cpe:/a:apache:struts:2.3.15",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.15:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.15.1",
        "cpe2.2": "cpe:/a:apache:struts:2.3.15.1",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.15.1:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.15.2",
        "cpe2.2": "cpe:/a:apache:struts:2.3.15.2",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.15.2:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.15.3",
        "cpe2.2": "cpe:/a:apache:struts:2.3.15.3",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.15.3:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.16",
        "cpe2.2": "cpe:/a:apache:struts:2.3.16",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.16:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.16.1",
        "cpe2.2": "cpe:/a:apache:struts:2.3.16.1",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.16.1:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.16.2",
        "cpe2.2": "cpe:/a:apache:struts:2.3.16.2",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.16.2:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.16.3",
        "cpe2.2": "cpe:/a:apache:struts:2.3.16.3",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.16.3:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.17",
        "cpe2.2": "cpe:/a:apache:struts:2.3.17",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.17:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.19",
        "cpe2.2": "cpe:/a:apache:struts:2.3.19",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.19:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.20",
        "cpe2.2": "cpe:/a:apache:struts:2.3.20",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.20:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.20.1",
        "cpe2.2": "cpe:/a:apache:struts:2.3.20.1",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.20.1:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.20.2",
        "cpe2.2": "cpe:/a:apache:struts:2.3.20.2",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.20.2:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.20.3",
        "cpe2.2": "cpe:/a:apache:struts:2.3.20.3",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.20.3:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.21",
        "cpe2.2": "cpe:/a:apache:struts:2.3.21",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.21:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.22",
        "cpe2.2": "cpe:/a:apache:struts:2.3.22",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.22:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.23",
        "cpe2.2": "cpe:/a:apache:struts:2.3.23",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.23:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.24",
        "cpe2.2": "cpe:/a:apache:struts:2.3.24",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.24:*:*:*:*:*:*:*"
      },
      {
        "title": null,
        "cpe2.2": "cpe:/a:apache:struts:2.3.24.1",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.24.1:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.24.2",
        "cpe2.2": "cpe:/a:apache:struts:2.3.24.2",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.24.2:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Struts 2.3.24.3",
        "cpe2.2": "cpe:/a:apache:struts:2.3.24.3",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.24.3:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.25",
        "cpe2.2": "cpe:/a:apache:struts:2.3.25",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.25:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.26",
        "cpe2.2": "cpe:/a:apache:struts:2.3.26",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.26:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.27",
        "cpe2.2": "cpe:/a:apache:struts:2.3.27",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.27:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.28",
        "cpe2.2": "cpe:/a:apache:struts:2.3.28",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.28:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Struts 2.3.28.1",
        "cpe2.2": "cpe:/a:apache:struts:2.3.28.1",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.28.1:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.29",
        "cpe2.2": "cpe:/a:apache:struts:2.3.29",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.29:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.30",
        "cpe2.2": "cpe:/a:apache:struts:2.3.30",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.30:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.3.31",
        "cpe2.2": "cpe:/a:apache:struts:2.3.31",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.3.31:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Struts 2.5",
        "cpe2.2": "cpe:/a:apache:struts:2.5",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.1",
        "cpe2.2": "cpe:/a:apache:struts:2.5.1",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.1:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.2",
        "cpe2.2": "cpe:/a:apache:struts:2.5.2",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.2:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.3",
        "cpe2.2": "cpe:/a:apache:struts:2.5.3",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.3:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.4",
        "cpe2.2": "cpe:/a:apache:struts:2.5.4",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.4:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.5",
        "cpe2.2": "cpe:/a:apache:struts:2.5.5",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.5:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.6",
        "cpe2.2": "cpe:/a:apache:struts:2.5.6",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.6:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.7",
        "cpe2.2": "cpe:/a:apache:struts:2.5.7",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.7:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.8",
        "cpe2.2": "cpe:/a:apache:struts:2.5.8",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.8:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.9",
        "cpe2.2": "cpe:/a:apache:struts:2.5.9",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.9:*:*:*:*:*:*:*"
      },
      {
        "title": "Apache Software Foundation Struts 2.5.10",
        "cpe2.2": "cpe:/a:apache:struts:2.5.10",
        "cpe2.3": "cpe:2.3:a:apache:struts:2.5.10:*:*:*:*:*:*:*"
      }
    ],
    "weaknesses": [
      {
        "id": "CWE-20",
        "parameters": {
          "class": "weakness",
          "title": "Improper Input Validation",
          "relationship": "CWE-119,CWE-74,CWE-41,CWE-22,CWE-693",
          "url": "https://cwe.mitre.org/data/definitions/20.html",
          "attack_patterns": [
            {
              "id": "CAPEC-99",
              "parameters": {
                "title": "XML Parser Attack",
                "attack_methods": "API Abuse,Injection",
                "mitigations": "Validate XML against a valid schema or DTD prior to parsing.|Pick a robust implementation of an XML parser.|Perform validation on canonical data.|Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.",
                "url": "https://capec.mitre.org/data/definitions/99.html"
              }
            },
            {
              "id": "CAPEC-9",
              "parameters": {
                "title": "Buffer Overflow in Local Command-Line Utilities",
                "attack_methods": "API Abuse,Injection",
                "mitigations": "Do not unnecessarily expose services.|Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.|Operational: Use OS-level preventative functionality. Not a complete solution.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Use an abstraction library to abstract away risky APIs. Not a complete solution.|Use a language or compiler that performs automatic bounds checking.|Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.",
                "url": "https://capec.mitre.org/data/definitions/9.html"
              }
            },
            {
              "id": "CAPEC-88",
              "parameters": {
                "title": "OS Command Injection",
                "attack_methods": "API Abuse,Injection",
                "mitigations": "All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.|Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands|Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.",
                "url": "https://capec.mitre.org/data/definitions/88.html"
              }
            },
            {
              "id": "CAPEC-85",
              "parameters": {
                "title": "AJAX Fingerprinting",
                "attack_methods": "Brute Force,Injection,Protocol Manipulation",
                "mitigations": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.|Implementation: Disable scripting languages such as JavaScript in browser|Implementation: Perform output validation for all remote content.|Implementation: Perform input validation for all remote content.|Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.|Design: Utilize strict type, character, and encoding enforcement|Design: Use browser technologies that do not allow client side scripting.",
                "url": "https://capec.mitre.org/data/definitions/85.html"
              }
            },
            {
              "id": "CAPEC-83",
              "parameters": {
                "title": "XPath Injection",
                "attack_methods": "Injection",
                "mitigations": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.|Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.|Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.",
                "url": "https://capec.mitre.org/data/definitions/83.html"
              }
            },
            {
              "id": "CAPEC-81",
              "parameters": {
                "title": "Web Logs Tampering",
                "attack_methods": "Time and State,Modification of Resources",
                "mitigations": "Design: Validate all log data before it is output|Design: Use input validation before writing to web log",
                "url": "https://capec.mitre.org/data/definitions/81.html"
              }
            },
            {
              "id": "CAPEC-80",
              "parameters": {
                "title": "Using UTF-8 Encoding to Bypass Validation Logic",
                "attack_methods": "API Abuse,Protocol Manipulation,Injection",
                "mitigations": "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.|Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)|For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).|The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence:|The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.",
                "url": "https://capec.mitre.org/data/definitions/80.html"
              }
            },
            {
              "id": "CAPEC-8",
              "parameters": {
                "title": "Buffer Overflow in an API Call",
                "attack_methods": "Injection,API Abuse",
                "mitigations": "Use OS-level preventative functionality. Not a complete solution.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|If you have to use dangerous functions, make sure that you do boundary checking.|Use secure functions not vulnerable to buffer overflow.|Use a language or compiler that performs automatic bounds checking.",
                "url": "https://capec.mitre.org/data/definitions/8.html"
              }
            },
            {
              "id": "CAPEC-79",
              "parameters": {
                "title": "Using Slashes in Alternate Encoding",
                "attack_methods": "API Abuse,Protocol Manipulation,Injection",
                "mitigations": "Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.|In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.|Test your path decoding process against malicious input.|Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)|There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)|When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.|Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.",
                "url": "https://capec.mitre.org/data/definitions/79.html"
              }
            },
            {
              "id": "CAPEC-78",
              "parameters": {
                "title": "Using Escaped Slashes in Alternate Encoding",
                "attack_methods": "API Abuse,Protocol Manipulation,Injection",
                "mitigations": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.|Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.|In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.|Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.|Be aware of the threat of alternative method of data encoding.|Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.|Verify that the user-supplied data does not use backslash character to escape malicious characters.",
                "url": "https://capec.mitre.org/data/definitions/78.html"
              }
            },
            {
              "id": "CAPEC-73",
              "parameters": {
                "title": "User-Controlled Filename",
                "attack_methods": "Modification of Resources",
                "mitigations": "Implementation: Scan dynamically generated content against validation specification|Implementation: Disable scripting languages such as JavaScript in browser|Implementation: Perform output validation for all remote content.|Implementation: Perform input validation for all remote content.|Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.|Design: Use browser technologies that do not allow client side scripting.",
                "url": "https://capec.mitre.org/data/definitions/73.html"
              }
            },
            {
              "id": "CAPEC-72",
              "parameters": {
                "title": "URL Encoding",
                "attack_methods": "API Abuse,Protocol Manipulation,Injection",
                "mitigations": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.|Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)|Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.|Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.|There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).|Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.|Refer to the RFCs to safely decode URL.",
                "url": "https://capec.mitre.org/data/definitions/72.html"
              }
            },
            {
              "id": "CAPEC-71",
              "parameters": {
                "title": "Using Unicode Encoding to Bypass Validation Logic",
                "attack_methods": "Injection,API Abuse,Modification of Resources",
                "mitigations": "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.|Ensure that filtering or input validation is applied to canonical data.|Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.",
                "url": "https://capec.mitre.org/data/definitions/71.html"
              }
            },
            {
              "id": "CAPEC-7",
              "parameters": {
                "title": "Blind SQL Injection",
                "attack_methods": "Analysis,Injection",
                "mitigations": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.|Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
                "url": "https://capec.mitre.org/data/definitions/7.html"
              }
            },
            {
              "id": "CAPEC-67",
              "parameters": {
                "title": "String Format Overflow in syslog()",
                "attack_methods": "Injection",
                "mitigations": "The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog():",
                "url": "https://capec.mitre.org/data/definitions/67.html"
              }
            },
            {
              "id": "CAPEC-66",
              "parameters": {
                "title": "SQL Injection",
                "attack_methods": "Injection",
                "mitigations": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.|Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.|Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
                "url": "https://capec.mitre.org/data/definitions/66.html"
              }
            },
            {
              "id": "CAPEC-64",
              "parameters": {
                "title": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
                "attack_methods": "API Abuse,Protocol Manipulation,Injection",
                "mitigations": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).|Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.|Refer to the RFCs to safely decode URL.|Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.|When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.|Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.|Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.",
                "url": "https://capec.mitre.org/data/definitions/64.html"
              }
            },
            {
              "id": "CAPEC-63",
              "parameters": {
                "title": "Cross-Site Scripting (XSS)",
                "attack_methods": "Protocol Manipulation,Modification of Resources,Injection",
                "mitigations": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.|Implementation: Session tokens for specific host|Implementation: Perform output validation for all remote content.|Implementation: Perform input validation for all remote content.|Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.|Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.|Design: Utilize strict type, character, and encoding enforcement|Design: Use browser technologies that do not allow client side scripting.",
                "url": "https://capec.mitre.org/data/definitions/63.html"
              }
            },
            {
              "id": "CAPEC-592",
              "parameters": {
                "title": "Stored XSS",
                "attack_methods": "",
                "mitigations": "Ensure that all user-supplied input is validated before being stored.|Utilize strict type, character, and encoding enforcement.|Use browser technologies that do not allow client-side scripting.",
                "url": "https://capec.mitre.org/data/definitions/592.html"
              }
            },
            {
              "id": "CAPEC-591",
              "parameters": {
                "title": "Reflected XSS",
                "attack_methods": "",
                "mitigations": "Ensure that all user-supplied input is validated before use.|Utilize strict type, character, and encoding enforcement.|Use browser technologies that do not allow client-side scripting.",
                "url": "https://capec.mitre.org/data/definitions/591.html"
              }
            },
            {
              "id": "CAPEC-588",
              "parameters": {
                "title": "DOM-Based XSS",
                "attack_methods": "",
                "mitigations": "Ensure that all user-supplied input is validated before use.|Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.|Use browser technologies that do not allow client-side scripting.",
                "url": "https://capec.mitre.org/data/definitions/588.html"
              }
            },
            {
              "id": "CAPEC-53",
              "parameters": {
                "title": "Postfix, Null Terminate, and Backslash",
                "attack_methods": "Injection",
                "mitigations": "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.|Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.",
                "url": "https://capec.mitre.org/data/definitions/53.html"
              }
            },
            {
              "id": "CAPEC-52",
              "parameters": {
                "title": "Embedding NULL Bytes",
                "attack_methods": "API Abuse,Modification of Resources,Injection",
                "mitigations": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.",
                "url": "https://capec.mitre.org/data/definitions/52.html"
              }
            },
            {
              "id": "CAPEC-484",
              "parameters": {
                "title": "XML Client-Side Attack",
                "attack_methods": "API Abuse,Injection",
                "mitigations": "The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.|Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.",
                "url": "https://capec.mitre.org/data/definitions/484.html"
              }
            },
            {
              "id": "CAPEC-473",
              "parameters": {
                "title": "Signature Spoof",
                "attack_methods": "Spoofing,Brute Force,API Abuse,Analysis,Protocol Manipulation",
                "mitigations": "",
                "url": "https://capec.mitre.org/data/definitions/473.html"
              }
            },
            {
              "id": "CAPEC-47",
              "parameters": {
                "title": "Buffer Overflow via Parameter Expansion",
                "attack_methods": "Injection",
                "mitigations": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
                "url": "https://capec.mitre.org/data/definitions/47.html"
              }
            },
            {
              "id": "CAPEC-46",
              "parameters": {
                "title": "Overflow Variables and Tags",
                "attack_methods": "Injection",
                "mitigations": "Do not trust input data from user. Validate all user input.|Use OS-level preventative functionality. Not a complete solution.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Use an abstraction library to abstract away risky APIs. Not a complete solution.|Use a language or compiler that performs automatic bounds checking.",
                "url": "https://capec.mitre.org/data/definitions/46.html"
              }
            },
            {
              "id": "CAPEC-45",
              "parameters": {
                "title": "Buffer Overflow via Symbolic Links",
                "attack_methods": "Modification of Resources,Injection",
                "mitigations": "Use OS-level preventative functionality. Not a complete solution.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Use an abstraction library to abstract away risky APIs. Not a complete solution.|Use a language or compiler that performs automatic bounds checking.|Always check the size of the input data before copying to a buffer.|Pay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources.|Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.|Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.",
                "url": "https://capec.mitre.org/data/definitions/45.html"
              }
            },
            {
              "id": "CAPEC-43",
              "parameters": {
                "title": "Exploiting Multiple Input Interpretation Layers",
                "attack_methods": "Modification of Resources,Injection",
                "mitigations": "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.|Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.|An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.",
                "url": "https://capec.mitre.org/data/definitions/43.html"
              }
            },
            {
              "id": "CAPEC-42",
              "parameters": {
                "title": "MIME Conversion",
                "attack_methods": "Injection",
                "mitigations": "Use mail.local|Use the sendmail restricted shell program (smrsh)|Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file.|Stay up to date with third party vendor patches",
                "url": "https://capec.mitre.org/data/definitions/42.html"
              }
            },
            {
              "id": "CAPEC-31",
              "parameters": {
                "title": "Accessing/Intercepting/Modifying HTTP Cookies",
                "attack_methods": "Time and State,Protocol Manipulation,API Abuse,Modification of Resources",
                "mitigations": "Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.|Implementation: Use SSL/TLS to protect cookie in transit|Design: Generate and validate MAC for cookies|Design: Use input validation for cookies",
                "url": "https://capec.mitre.org/data/definitions/31.html"
              }
            },
            {
              "id": "CAPEC-3",
              "parameters": {
                "title": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
                "attack_methods": "API Abuse,Injection",
                "mitigations": "Take an iterative approach to input validation (defense in depth).|Canonicalize all data prior to validation.|Perform white list rather than black list input validation.",
                "url": "https://capec.mitre.org/data/definitions/3.html"
              }
            },
            {
              "id": "CAPEC-28",
              "parameters": {
                "title": "Fuzzing",
                "attack_methods": "Brute Force,Injection,Analysis",
                "mitigations": "Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.|Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.",
                "url": "https://capec.mitre.org/data/definitions/28.html"
              }
            },
            {
              "id": "CAPEC-267",
              "parameters": {
                "title": "Leverage Alternate Encoding",
                "attack_methods": "API Abuse,Protocol Manipulation,Injection",
                "mitigations": "Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.|Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)",
                "url": "https://capec.mitre.org/data/definitions/267.html"
              }
            },
            {
              "id": "CAPEC-250",
              "parameters": {
                "title": "XML Injection",
                "attack_methods": "Injection",
                "mitigations": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.",
                "url": "https://capec.mitre.org/data/definitions/250.html"
              }
            },
            {
              "id": "CAPEC-24",
              "parameters": {
                "title": "Filter Failure through Buffer Overflow",
                "attack_methods": "Injection",
                "mitigations": "Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.|Operational: Use OS-level preventative functionality. Not a complete solution.|Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Pre-design: Use a language or compiler that performs automatic bounds checking.|Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
                "url": "https://capec.mitre.org/data/definitions/24.html"
              }
            },
            {
              "id": "CAPEC-231",
              "parameters": {
                "title": "XML Oversized Payloads",
                "attack_methods": "API Abuse,Injection",
                "mitigations": "Validate XML against a valid schema or DTD prior to parsing.|Pick a robust implementation of an XML parser.|Perform validation on canonical data.|Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.",
                "url": "https://capec.mitre.org/data/definitions/231.html"
              }
            },
            {
              "id": "CAPEC-230",
              "parameters": {
                "title": "XML Nested Payloads",
                "attack_methods": "API Abuse,Injection",
                "mitigations": "Validate XML against a valid schema or DTD prior to parsing.|Pick a robust implementation of an XML parser.|Perform validation on canonical data.|Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.",
                "url": "https://capec.mitre.org/data/definitions/230.html"
              }
            },
            {
              "id": "CAPEC-22",
              "parameters": {
                "title": "Exploiting Trust in Client",
                "attack_methods": "Protocol Manipulation,Spoofing",
                "mitigations": "Implementation: Perform input validation for all remote content.|Design: Utilize two factor authentication to increase authentication assurance.|Design: Utilize digital signatures to increase authentication assurance.|Design: Do not rely on client validation or encoding for security purposes.|Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.",
                "url": "https://capec.mitre.org/data/definitions/22.html"
              }
            },
            {
              "id": "CAPEC-209",
              "parameters": {
                "title": "XSS Using MIME Type Mismatch",
                "attack_methods": "",
                "mitigations": "",
                "url": "https://capec.mitre.org/data/definitions/209.html"
              }
            },
            {
              "id": "CAPEC-182",
              "parameters": {
                "title": "Flash Injection",
                "attack_methods": "Injection",
                "mitigations": "Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.|Implementation: use SSL when loading external data|Implementation: remove debug information.|Implementation: use validation on both client and server side.|Implementation: remove sensitive information such as user name and password in the SWF file.",
                "url": "https://capec.mitre.org/data/definitions/182.html"
              }
            },
            {
              "id": "CAPEC-14",
              "parameters": {
                "title": "Client-side Injection-induced Buffer Overflow",
                "attack_methods": "Injection,API Abuse",
                "mitigations": "Use OS-level preventative functionality. Not a complete solution.|Ensure all buffer uses are consistently bounds-checked.|Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.|Use an abstraction library to abstract away risky APIs. Not a complete solution.|Use a language or compiler that performs automatic bounds checking.|Perform input validation for length of buffer inputs.|The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.|The client software should not install untrusted code from a non-authenticated server.",
                "url": "https://capec.mitre.org/data/definitions/14.html"
              }
            },
            {
              "id": "CAPEC-136",
              "parameters": {
                "title": "LDAP Injection",
                "attack_methods": "Injection",
                "mitigations": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.|Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.",
                "url": "https://capec.mitre.org/data/definitions/136.html"
              }
            },
            {
              "id": "CAPEC-135",
              "parameters": {
                "title": "Format String Injection",
                "attack_methods": "Injection",
                "mitigations": "Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.|Limit the usage of formatting string functions.",
                "url": "https://capec.mitre.org/data/definitions/135.html"
              }
            },
            {
              "id": "CAPEC-13",
              "parameters": {
                "title": "Subverting Environment Variable Values",
                "attack_methods": "Protocol Manipulation,Modification of Resources,Injection",
                "mitigations": "Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.|Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.|Protect the configuration files which contain environment variables against illegitimate read and write access.|Protect environment variables against unauthorized read and write access.",
                "url": "https://capec.mitre.org/data/definitions/13.html"
              }
            },
            {
              "id": "CAPEC-110",
              "parameters": {
                "title": "SQL Injection through SOAP Parameter Tampering",
                "attack_methods": "Analysis,Injection",
                "mitigations": "At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.|Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.|Properly validate and sanitize/reject user input at the service provider.",
                "url": "https://capec.mitre.org/data/definitions/110.html"
              }
            },
            {
              "id": "CAPEC-109",
              "parameters": {
                "title": "Object Relational Mapping Injection",
                "attack_methods": "API Abuse,Analysis,Injection",
                "mitigations": "Ensure to keep up to date with security relevant updates to the persistence framework used within your application.|Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework",
                "url": "https://capec.mitre.org/data/definitions/109.html"
              }
            },
            {
              "id": "CAPEC-108",
              "parameters": {
                "title": "Command Line Execution through SQL Injection",
                "attack_methods": "Injection,Analysis",
                "mitigations": "Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).|Properly validate the data (syntactically and semantically) before writing it to the database.|Disable MSSQL xp_cmdshell directive on the database",
                "url": "https://capec.mitre.org/data/definitions/108.html"
              }
            },
            {
              "id": "CAPEC-104",
              "parameters": {
                "title": "Cross Zone Scripting",
                "attack_methods": "Injection,Analysis",
                "mitigations": "Ensure proper HTML output encoding before writing user supplied data to the page|Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum|Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone|Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone|Disable script execution.",
                "url": "https://capec.mitre.org/data/definitions/104.html"
              }
            },
            {
              "id": "CAPEC-101",
              "parameters": {
                "title": "Server Side Include (SSI) Injection",
                "attack_methods": "Protocol Manipulation,Injection",
                "mitigations": "Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead|All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive|Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them",
                "url": "https://capec.mitre.org/data/definitions/101.html"
              }
            },
            {
              "id": "CAPEC-10",
              "parameters": {
                "title": "Buffer Overflow via Environment Variables",
                "attack_methods": "Injection",
                "mitigations": "There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.|Use a language or compiler that performs automatic bounds checking|Do not use untrusted data in your environment variables.|Do not expose environment variable to the user.",
                "url": "https://capec.mitre.org/data/definitions/10.html"
              }
            }
          ],
          "ranking": {
            "categorization": [
              {
                "id": "CWE-1005",
                "parameters": {
                  "title": "7PK - Input Validation and Representation",
                  "url": "https://cwe.mitre.org/data/definitions/1005.html"
                }
              },
              {
                "id": "CWE-1019",
                "parameters": {
                  "title": "Validate Inputs",
                  "url": "https://cwe.mitre.org/data/definitions/1019.html"
                }
              },
              {
                "id": "CWE-19",
                "parameters": {
                  "title": "Data Processing Errors",
                  "url": "https://cwe.mitre.org/data/definitions/19.html"
                }
              },
              {
                "id": "CWE-722",
                "parameters": {
                  "title": "OWASP Top Ten 2004 Category A1 - Unvalidated Input",
                  "url": "https://cwe.mitre.org/data/definitions/722.html"
                }
              },
              {
                "id": "CWE-738",
                "parameters": {
                  "title": "CERT C Secure Coding (2008 Version) Section 04 - Integers (INT)",
                  "url": "https://cwe.mitre.org/data/definitions/738.html"
                }
              },
              {
                "id": "CWE-742",
                "parameters": {
                  "title": "CERT C Secure Coding (2008 Version) Section 08 - Memory Management (MEM)",
                  "url": "https://cwe.mitre.org/data/definitions/742.html"
                }
              },
              {
                "id": "CWE-746",
                "parameters": {
                  "title": "CERT C Secure Coding (2008 Version) Section 12 - Error Handling (ERR)",
                  "url": "https://cwe.mitre.org/data/definitions/746.html"
                }
              },
              {
                "id": "CWE-747",
                "parameters": {
                  "title": "CERT C Secure Coding (2008 Version) Section 49 - Miscellaneous (MSC)",
                  "url": "https://cwe.mitre.org/data/definitions/747.html"
                }
              },
              {
                "id": "CWE-751",
                "parameters": {
                  "title": "2009 Top 25 - Insecure Interaction Between Components",
                  "url": "https://cwe.mitre.org/data/definitions/751.html"
                }
              },
              {
                "id": "CWE-872",
                "parameters": {
                  "title": "CERT C++ Secure Coding Section 04 - Integers (INT)",
                  "url": "https://cwe.mitre.org/data/definitions/872.html"
                }
              },
              {
                "id": "CWE-876",
                "parameters": {
                  "title": "CERT C++ Secure Coding Section 08 - Memory Management (MEM)",
                  "url": "https://cwe.mitre.org/data/definitions/876.html"
                }
              },
              {
                "id": "CWE-883",
                "parameters": {
                  "title": "CERT C++ Secure Coding Section 49 - Miscellaneous (MSC)",
                  "url": "https://cwe.mitre.org/data/definitions/883.html"
                }
              },
              {
                "id": "CWE-994",
                "parameters": {
                  "title": "SFP Secondary Cluster: Tainted Input to Variable",
                  "url": "https://cwe.mitre.org/data/definitions/994.html"
                }
              }
            ],
            "wasc": [
              {
                "id": "WASC-20",
                "parameters": {
                  "title": "Improper Input Handling",
                  "url": "http://projects.webappsec.org/Improper-Input-Handling"
                }
              }
            ],
            "att&ck_mitre": []
          }
        }
      }
    ]
  },
  "risk": {
    "cvss": {
      "cvss2": {
        "vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C",
        "base_score": "10.0",
        "impact_score": "10.0",
        "exploit_score": "10.0",
        "access_vector": "NETWORK",
        "access_complexity": "LOW",
        "authentication": "NONE",
        "confidentiality_impact": "COMPLETE",
        "integrity_impact": "COMPLETE",
        "availability_impact": "COMPLETE"
      },
      "cvss3": {
        "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
        "base_score": "10.0",
        "impact_score": "6.0",
        "exploit_score": "3.9",
        "attack_vector": "NETWORK",
        "attack_complexity": "LOW",
        "privileges_required": "NONE",
        "user_interaction": "NONE",
        "score": "CHANGED",
        "confidentiality_impact": "HIGH",
        "integrity_impact": "HIGH",
        "availability_impact": "HIGH"
      }
    }
  },
  "inspection": {
    "remote": [
      {
        "nessus": [
          {
            "id": "97576",
            "parameters": {
              "family": "Misc.",
              "name": "Apache Struts 2.3.5 - 2.3.31 / 2.5.x < 2.5.10.1 Jakarta Multipart Parser RCE",
              "file": "struts_2_5_10_1_win_local.nasl",
              "url": "https://www.tenable.com/plugins/index.php?view=single&id=97576"
            }
          },
          {
            "id": "99593",
            "parameters": {
              "family": "CGI abuses",
              "name": "MySQL Enterprise Monitor 3.1.x < 3.1.7.8023 / 3.2.x < 3.2.7.1204 / 3.3.x < 3.3.3.1199 Multiple Vulnerabilities (April 2017 CPU)",
              "file": "mysql_enterprise_monitor_3_3_3_1199.nasl",
              "url": "https://www.tenable.com/plugins/index.php?view=single&id=99593"
            }
          },
          {
            "id": "99528",
            "parameters": {
              "family": "Misc.",
              "name": "Oracle WebLogic Server Multiple Vulnerabilities (April 2017 CPU)",
              "file": "oracle_weblogic_server_cpu_apr_2017.nasl",
              "url": "https://www.tenable.com/plugins/index.php?view=single&id=99528"
            }
          },
          {
            "id": "97610",
            "parameters": {
              "family": "CGI abuses",
              "name": "Apache Struts 2.3.5 - 2.3.31 / 2.5.x < 2.5.10.1 Jakarta Multipart Parser RCE (remote)",
              "file": "struts_2_5_10_1_rce.nasl",
              "url": "https://www.tenable.com/plugins/index.php?view=single&id=97610"
            }
          },
          {
            "id": "101815",
            "parameters": {
              "family": "Misc.",
              "name": "Oracle WebLogic Server Multiple Vulnerabilities (July 2017 CPU)",
              "file": "oracle_weblogic_server_cpu_jul_2017.nasl",
              "url": "https://www.tenable.com/plugins/index.php?view=single&id=101815"
            }
          }
        ]
      },
      {
        "nmap": [
          {
            "id": "http-vuln-cve2017-5638.nse",
            "parameters": {
              "family": "vuln",
              "name": "Apache Struts Remote Code Execution Vulnerability",
              "file": "http-vuln-cve2017-5638.nse",
              "url": "https://nmap.org/nsedoc/scripts/http-vuln-cve2017-5638.html"
            }
          }
        ]
      },
      {
        "openvas": [
          {
            "id": "106647",
            "parameters": {
              "family": "CISCO",
              "name": "Cisco Unified Communications Manager Apache Struts2 Jakarta Multipart Parser File Upload Code Execution Vulnerability",
              "file": "gb_cisco_cucm_cisco-sa-20170310-struts2.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=106647"
            }
          },
          {
            "id": "811244",
            "parameters": {
              "family": "Web application abuses",
              "name": "Oracle WebLogic Server Multiple Vulnerabilities (cpujul2017-3236622)",
              "file": "gb_oracle_webLogic_server_cpujul2017-3236622_01.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=811244"
            }
          },
          {
            "id": "106646",
            "parameters": {
              "family": "CISCO",
              "name": "Cisco Unified Communications Manager IM and Presence Service Apache Struts2 Jakarta Multipart Parser File Upload Code Execution Vulnerability",
              "file": "gb_cisco_cucmim_cisco-sa-20170310-struts2.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=106646"
            }
          },
          {
            "id": "140229",
            "parameters": {
              "family": "VMware Local Security Checks",
              "name": "VMSA-201-0004: vRealize Operations (vROps) Remote Code Execution Vulnerability Via Apache Struts 2",
              "file": "gb_vmware_vrealize_operations_manager_VMSA-2017-0004.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=140229"
            }
          },
          {
            "id": "106653",
            "parameters": {
              "family": "Web application abuses",
              "name": "Atlassian Crowd Struts2 RCE Vulnerability",
              "file": "gb_atlassian_crowd_struts_vuln.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=106653"
            }
          },
          {
            "id": "106640",
            "parameters": {
              "family": "CISCO",
              "name": "Cisco Identity Services Engine Apache Struts2 Jakarta Multipart Parser File Upload Code Execution Vulnerability",
              "file": "gb_cisco_ise_cisco-sa-20170310-struts2.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=106640"
            }
          },
          {
            "id": "106652",
            "parameters": {
              "family": "Web application abuses",
              "name": "Atlassian Bamboo Struts2 RCE Vulnerability",
              "file": "gb_atlassian_bamboo_struts_vuln.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=106652"
            }
          },
          {
            "id": "140190",
            "parameters": {
              "family": "General",
              "name": "VMSA-2017-0004: VMware product updates resolve remote code execution vulnerability via Apache Struts 2",
              "file": "gb_vcenter_VMSA-2017-0004.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=140190"
            }
          },
          {
            "id": "140180",
            "parameters": {
              "family": "Web application abuses",
              "name": "Apache Struts Remote Code Execution Vulnerability (Active Check)",
              "file": "gb_apache_struts_CVE_2017_5638.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=140180"
            }
          },
          {
            "id": "106736",
            "parameters": {
              "family": "Web application abuses",
              "name": "HPE Universal CMDB Remote Code Execution Vulnerability",
              "file": "gb_hpe_universal_cmdb_struts_vuln.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=106736"
            }
          },
          {
            "id": "810748",
            "parameters": {
              "family": "Web application abuses",
              "name": "Oracle WebLogic Server Multiple Vulnerabilities-01 (cpuapr2017-3236618)",
              "file": "gb_oracle_webLogic_server_cpuapr2017-3236618_01.nasl",
              "url": "https://secinfo.greenbone.net/omp?cmd=get_info&info_type=nvt&token=guest&filter=810748"
            }
          }
        ]
      }
    ],
    "local": [
      {
        "oval-ubuntu": [
          {
            "id": "oval:com.ubuntu.trusty:def:20175638000",
            "parameters": {
              "family": "vulnerability",
              "name": "CVE-2017-5638 on Ubuntu 14.04 LTS (trusty) - untriaged.",
              "file": "com.ubuntu.trusty.cve.oval.xml",
              "url": "https://people.canonical.com/~ubuntu-security/cve/CVE-2017-5638"
            }
          },
          {
            "id": "oval:com.ubuntu.precise:def:20175638000",
            "parameters": {
              "family": "vulnerability",
              "name": "CVE-2017-5638 on Ubuntu 12.04 LTS (precise) - medium.",
              "file": "com.ubuntu.precise.cve.oval.xml",
              "url": "https://people.canonical.com/~ubuntu-security/cve/CVE-2017-5638"
            }
          }
        ]
      }
    ]
  },
  "exploitation": [
    {
      "exploitdb": [
        {
          "id": "41570",
          "parameters": {
            "title": "Apache Struts 2.3.5 < 2.3.31 / 2.5 < 2.5.10 - Remote Code Execution",
            "file": "exploit-database/exploits/linux/webapps/41570.py",
            "url": "https://www.exploit-db.com/exploits/41570/"
          }
        },
        {
          "id": "41614",
          "parameters": {
            "title": "Apache Struts 2.3.5 < 2.3.31 / 2.5 < 2.5.10 - 'Jakarta' Multipart Parser OGNL Injection (Metasploit)",
            "file": "exploit-database/exploits/multiple/remote/41614.rb",
            "url": "https://www.exploit-db.com/exploits/41614/"
          }
        }
      ]
    },
    {
      "metasploit": [
        {
          "id": "struts2_content_type_ognl.rb",
          "parameters": {
            "title": "Apache Struts Jakarta Multipart Parser OGNL Injection",
            "file": "modules/exploits/multi/http/struts2_content_type_ognl.rb",
            "url": "https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/http/struts2_content_type_ognl.rb"
          }
        }
      ]
    },
    {
      "packetstorm": [
        {
          "id": "141494",
          "parameters": {
            "title": "",
            "file": "",
            "url": "https://packetstormsecurity.com/files/141494/S2-45-poc.py.txt"
          }
        }
      ]
    },
    {
      "saint": [
        {
          "id": "web_dev_struts2jakartarce",
          "parameters": {
            "title": "Apache Struts 2 Jakarta Multipart Parser file upload command execution",
            "file": "apache_struts2_jakarta_file_upload_command_execution",
            "url": "https://download.saintcorporation.com/cgi-bin/exploit_info/apache_struts2_jakarta_file_upload_command_execution"
          }
        }
      ]
    }
  ],
  "defense": {
    "preventive": [
      {
        "bid": [
          {
            "id": "96729",
            "parameters": {
              "class": "bulletin",
              "url": "http://www.securityfocus.com/bid/96729"
            }
          }
        ]
      },
      {
        "certvn": [
          {
            "id": "VU#834067",
            "parameters": {
              "class": "bulletin",
              "url": "https://www.kb.cert.org/vuls/id/834067"
            }
          }
        ]
      },
      {
        "cisco": [
          {
            "id": "cisco-sa-20170310-struts2",
            "parameters": {
              "class": "fix",
              "url": "https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20170310-struts2"
            }
          },
          {
            "id": "CSCvd51442",
            "parameters": {
              "class": "bug",
              "url": "https://bst.cloudapps.cisco.com/bugsearch/bug/CSCvd51442"
            }
          }
        ]
      },
      {
        "oracle": [
          {
            "id": "cpujul2017",
            "parameters": {
              "class": "fix",
              "url": "http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html"
            }
          }
        ]
      },
      {
        "vuldb": [
          {
            "id": "103789",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.103789"
            }
          },
          {
            "id": "100194",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100194"
            }
          },
          {
            "id": "100097",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100097"
            }
          },
          {
            "id": "100060",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100060"
            }
          },
          {
            "id": "100059",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100059"
            }
          },
          {
            "id": "100058",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100058"
            }
          },
          {
            "id": "100057",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100057"
            }
          },
          {
            "id": "100056",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100056"
            }
          },
          {
            "id": "100055",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100055"
            }
          },
          {
            "id": "100054",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100054"
            }
          },
          {
            "id": "100053",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100053"
            }
          },
          {
            "id": "100052",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100052"
            }
          },
          {
            "id": "100051",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100051"
            }
          },
          {
            "id": "100050",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100050"
            }
          },
          {
            "id": "100049",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100049"
            }
          },
          {
            "id": "100048",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100048"
            }
          },
          {
            "id": "100047",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100047"
            }
          },
          {
            "id": "100046",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100046"
            }
          },
          {
            "id": "100045",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100045"
            }
          },
          {
            "id": "100044",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100044"
            }
          },
          {
            "id": "100043",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100043"
            }
          },
          {
            "id": "100042",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100042"
            }
          },
          {
            "id": "100031",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100031"
            }
          },
          {
            "id": "100027",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.100027"
            }
          },
          {
            "id": "99968",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.99968"
            }
          },
          {
            "id": "99964",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.99964"
            }
          },
          {
            "id": "97732",
            "parameters": {
              "class": "bulletin",
              "url": "https://vuldb.com/?id.97732"
            }
          }
        ]
      }
    ],
    "detective": [
      {
        "snort": [
          {
            "id": "41819",
            "parameters": {
              "class": "attempted-admin",
              "title": "SERVER-APACHE Apache Struts remote code execution attempt",
              "url": "https://snort.org/rule_docs/1-41819/"
            }
          },
          {
            "id": "41818",
            "parameters": {
              "class": "attempted-admin",
              "title": "SERVER-APACHE Apache Struts remote code execution attempt",
              "url": "https://snort.org/rule_docs/1-41818/"
            }
          },
          {
            "id": "41923",
            "parameters": {
              "class": "attempted-admin",
              "title": "SERVER-APACHE Apache Struts remote code execution attempt",
              "url": "https://snort.org/rule_docs/1-41923/"
            }
          },
          {
            "id": "41922",
            "parameters": {
              "class": "attempted-admin",
              "title": "SERVER-APACHE Apache Struts remote code execution attempt",
              "url": "https://snort.org/rule_docs/1-41922/"
            }
          }
        ]
      }
    ]
  }
}